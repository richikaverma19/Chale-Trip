chaletrip-backend/
├── models/
│   ├── User.js
│   ├── Destination.js
│   ├── Trip.js
│   ├── Booking.js
│   └── Service.js
├── middleware/
│   └── auth.js
├── routes/
│   ├── auth.js
│   ├── destinations.js
│   ├── trips.js
│   ├── bookings.js
│   └── services.js
├── .env
└── app.js




/routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Register
router.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // Check if user exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const passwordHash = await bcrypt.hash(password, salt);

    // Create user
    const newUser = new User({
      username,
      email,
      passwordHash,
      salt,
      role: 'user',
      profile: {
        firstName: req.body.firstName,
        lastName: req.body.lastName
      }
    });

    await newUser.save();

    // Create token
    const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {
      expiresIn: '24h'
    });

    res.status(201).json({ token, user: newUser });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Login
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Check if user exists
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Validate password
    const isMatch = await bcrypt.compare(password, user.passwordHash);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Create token
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: '24h'
    });

    res.json({ token, user });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Forgot Password
router.post('/forgot-password', async (req, res) => {
  // Implementation for password reset
});

module.exports = router;




/routes/destinations.js
const express = require('express');
const router = express.Router();
const Destination = require('../models/Destination');

// Get all destinations
router.get('/', async (req, res) => {
  try {
    const { type, search, limit } = req.query;
    let query = {};

    if (type) query.type = type;
    if (search) query.name = { $regex: search, $options: 'i' };

    const destinations = await Destination.find(query).limit(parseInt(limit) || 10);
    res.json(destinations);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get single destination
router.get('/:id', async (req, res) => {
  try {
    const destination = await Destination.findById(req.params.id);
    if (!destination) {
      return res.status(404).json({ message: 'Destination not found' });
    }
    res.json(destination);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get trek destinations
router.get('/trek', async (req, res) => {
  try {
    const treks = await Destination.find({ type: 'trek' });
    res.json(treks);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get city destinations
router.get('/city', async (req, res) => {
  try {
    const cities = await Destination.find({ type: 'city' });
    res.json(cities);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;   



/routes/trips.js
const express = require('express');
const router = express.Router();
const Trip = require('../models/Trip');
const auth = require('../middleware/auth');

// Create trip (protected route)
router.post('/', auth, async (req, res) => {
  try {
    const { title, destinations, travelers, budget, preferences } = req.body;

    const newTrip = new Trip({
      userId: req.user.id,
      title,
      destinations,
      travelers,
      budget,
      preferences,
      status: 'planning'
    });

    await newTrip.save();
    res.status(201).json(newTrip);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get user trips (protected)
router.get('/user/:userId', auth, async (req, res) => {
  try {
    const trips = await Trip.find({ userId: req.params.userId });
    res.json(trips);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get trip details
router.get('/:id', auth, async (req, res) => {
  try {
    const trip = await Trip.findById(req.params.id);
    if (!trip) {
      return res.status(404).json({ message: 'Trip not found' });
    }
    
    // Verify user owns the trip
    if (trip.userId.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Unauthorized' });
    }

    res.json(trip);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Update trip
router.put('/:id', auth, async (req, res) => {
  try {
    const updatedTrip = await Trip.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );
    res.json(updatedTrip);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router; 




/routes/services.js
const express = require('express');
const router = express.Router();
const Service = require('../models/Service');

// Get all services
router.get('/', async (req, res) => {
  try {
    const { type, destinationId } = req.query;
    let query = {};
    
    if (type) query.type = type;
    if (destinationId) query.destinationId = destinationId;

    const services = await Service.find(query);
    res.json(services);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get services by destination
router.get('/destination/:destinationId', async (req, res) => {
  try {
    const services = await Service.find({ destinationId: req.params.destinationId });
    res.json(services);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;



app.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');

// Load env vars
dotenv.config();

// Create Express app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error(err));

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/destinations', require('./routes/destinations'));
app.use('/api/trips', require('./routes/trips'));
app.use('/api/bookings', require('./routes/bookings'));
app.use('/api/services', require('./routes/services'));

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Server error' });
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});




/middleware/auth.js
const jwt = require('jsonwebtoken');
const User = require('../models/User');

module.exports = async (req, res, next) => {
  try {
    // Get token from header
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ message: 'No token, authorization denied' });
    }

    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Get user from token
    const user = await User.findById(decoded.id).select('-passwordHash -salt');
    if (!user) {
      return res.status(401).json({ message: 'Invalid token' });
    }

    req.user = user;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};




.env
MONGODB_URI=mongodb://localhost:27017/chaletrip
JWT_SECRET=your_jwt_secret_key
PORT=5000




